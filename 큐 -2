#include <stdio.h>
#include <stdlib.h>

typedef struct {
    int max;
    int num;
    int front;
    int rear;
    int *que;
}IntQueue;

int Init(IntQueue *q, int max){
    q->num = q->front = q->rear = 0;
    if((q->que = malloc(sizeof (int)*max))==NULL){
        q->max=0;
        return -1;
    }
    q->max=max;
    return 0;
}

int EnQueue(IntQueue *q, int x){
    if(q->max <= q->num)
        return -1;
    else{
        q->num++;
        q->que[q->rear++] = x;
        if(q->rear == q->max)
            q->rear = 0;
        return 0;
    }
}

int DeQueue(IntQueue *q, int *x){
    if(q->num<=0)
        return -1;
    else{
        q->num--;
        *x = q->que[q->front++];
        if(q->front == q->max)
            q->front = 0;
        return 0;
    }
}

int Peek(IntQueue *q, int *x){
    if(q->num <= 0)
        return -1;
    else
        *x = q->que[q->front];
    return 0;
}

void Clear(IntQueue *q){
    q->num = q->front = q->rear = 0;
}

int Capacity(const IntQueue *q){
    return q->max;
}

int Size(const IntQueue *q){
    return q->num;
}

int IsEmpty(const IntQueue *q){
    return q->num <= 0;
}

int IsFull(const IntQueue *q){
    return q->num >= q->max;
}

int Search(const IntQueue *q, int x){
    int i ,index;

    for(i=0;i<q->num;i++){
        if(q->que[index=(i + q->front) % q->max] == x)
            return index;
    }
    return -1;
}

int search2(IntQueue *q,int x){
    int i;
    for(i=0;i<q->num;i++){
        if(q->que[(i + q->front) % q->max] == x)
            return i;
    }
    return -1;
}

void Print(IntQueue *q){
    int i;
    for(i=q->front;i<q->rear;i++){
        printf("%d ",q->que[i]);
    }
    printf("\n");
}

void Terminate(IntQueue *q){
    if(q->que != NULL)
        free(q->que);
    q->num = q->max = q->front = q->rear = 0;
}
